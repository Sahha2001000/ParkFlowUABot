from datetime import datetime, timedelta
from email.utils import parsedate_to_datetime
import pytz

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, any_state
from loguru import logger

from telegram_bot.keyboards.menu import main_menu
from telegram_bot.services.booking_service import (
    get_all_cities,
    get_parkings_by_city,
    get_available_spots,
    get_user_cars,
    get_spot_by_id,
    book_spot,
    get_user_bookings
)
from telegram_bot.services.card_service import get_user_cards

router = Router()

STATUS_LABELS = {
    "paid": "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ",
    "pending": "üïí –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É",
    "rejected": "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ",
}

class SpotState(StatesGroup):
    select_city = State()
    select_parking = State()
    select_spot = State()
    select_car = State()
    select_card = State()
    select_duration = State()
    confirm_booking = State()

async def push_state(state: FSMContext, new_state: State):
    data = await state.get_data()
    history = data.get("state_history", [])
    current = await state.get_state()
    if current:
        history.append(current)
    await state.update_data(state_history=history)
    await state.set_state(new_state)

def build_keyboard_from_list(options: list[str]) -> ReplyKeyboardMarkup:
    rows = [[KeyboardButton(text=o)] for o in options]
    rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

@router.message(F.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", any_state)
async def handle_main_menu_any(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get("phone_number")
    await state.clear()
    if phone:
        await state.update_data(phone_number=phone)
    await message.answer("‚¨ÖÔ∏è –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())

async def handle_navigation_buttons(message: Message, state: FSMContext):
    data = await state.get_data()
    history = data.get("state_history", [])
    phone = data.get("phone_number")

    if message.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await state.clear()
        if phone:
            await state.update_data(phone_number=phone)
        return await message.answer("‚¨ÖÔ∏è –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if not history:
            await state.clear()
            if phone:
                await state.update_data(phone_number=phone)
            return await message.answer("‚¨ÖÔ∏è –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())

        prev_state = history.pop()
        await state.set_state(prev_state)
        await state.update_data(state_history=history)

        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –Ω–∞–∑–∞–¥
        match prev_state:
            case SpotState.select_city.state:
                return await start_checking(message, state)
            case SpotState.select_parking.state:
                return await select_city(message, state)
            case SpotState.select_spot.state:
                return await select_parking(message, state)
            case SpotState.select_car.state:
                return await select_spot(message, state)
            case SpotState.select_card.state:
                return await select_car(message, state)
            case SpotState.select_duration.state:
                return await select_card(message, state)
            case SpotState.confirm_booking.state:
                return await select_duration(message, state)

        return await message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É.")


@router.message(F.text == "üìç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –º—ñ—Å—Ü—è")
async def start_checking(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get("phone_number")
    if not phone:
        return await message.answer("‚ö†Ô∏è –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /start.")

    await state.clear()
    await state.update_data(phone_number=phone)

    try:
        cities = await get_all_cities()
    except Exception as e:
        logger.exception("[BOT] get_all_cities failed")
        return await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")

    if not cities:
        return await message.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ç.")

    await push_state(state, SpotState.select_city)
    await state.update_data(cities=cities)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:", reply_markup=build_keyboard_from_list(
        [f"{c['id']}: {c['name']}" for c in cities]
    ))

@router.message(SpotState.select_city)
async def select_city(message: Message, state: FSMContext):
    if message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]:
        return await handle_navigation_buttons(message, state)

    data = await state.get_data()
    cities = data.get("cities", [])
    city = next((c for c in cities if f"{c['id']}: {c['name']}" == message.text.strip()), None)
    if not city:
        return await message.answer("–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    try:
        parkings = await get_parkings_by_city(city["id"])
    except Exception:
        logger.exception("[BOT] get_parkings_by_city failed")
        return await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä–∫—ñ–Ω–≥–∏.")

    if not parkings:
        return await message.answer("–ù–µ–º–∞—î –ø–∞—Ä–∫—ñ–Ω–≥—ñ–≤.")

    await push_state(state, SpotState.select_parking)
    await state.update_data(parkings=parkings)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∫—ñ–Ω–≥:", reply_markup=build_keyboard_from_list(
        [f"{p['id']}: {p['name']}" for p in parkings]
    ))

@router.message(SpotState.select_parking)
async def select_parking(message: Message, state: FSMContext):
    if message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]:
        return await handle_navigation_buttons(message, state)

    data = await state.get_data()
    parkings = data.get("parkings", [])
    parking = next((p for p in parkings if f"{p['id']}: {p['name']}" == message.text.strip()), None)
    if not parking:
        return await message.answer("–ü–∞—Ä–∫—ñ–Ω–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    try:
        spots = await get_available_spots(parking["id"])
    except Exception:
        logger.exception("[BOT] get_available_spots failed")
        return await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ—Å—Ü—è.")

    if not spots:
        return await message.answer("–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å.")

    await push_state(state, SpotState.select_spot)
    await state.update_data(selected_parking=parking, spots=spots)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ:", reply_markup=build_keyboard_from_list([
        f"{s['id']}: –ú—ñ—Å—Ü–µ ‚Ññ{s['number']}) {s['hourly_rate']} —Ü—ñ–Ω–∞ –∑–∞ –≥–æ–¥–∏–Ω—É" for s in spots
    ]))

@router.message(SpotState.select_spot)
async def select_spot(message: Message, state: FSMContext):
    if message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]:
        return await handle_navigation_buttons(message, state)

    data = await state.get_data()
    spot = next((s for s in data.get("spots", []) if f"{s['id']}: –ú—ñ—Å—Ü–µ ‚Ññ{s['number']}) {s['hourly_rate']} —Ü—ñ–Ω–∞ –∑–∞ –≥–æ–¥–∏–Ω—É" == message.text.strip()), None)
    if not spot:
        return await message.answer("–ú—ñ—Å—Ü–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    try:
        cars = await get_user_cars(data["phone_number"])
    except Exception:
        logger.exception("[BOT] get_user_cars failed")
        return await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ.")

    if not cars:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–≤—Ç–æ.")

    await push_state(state, SpotState.select_car)
    await state.update_data(selected_spot=spot, cars=cars)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∞–≤—Ç–æ:", reply_markup=build_keyboard_from_list([
        f"{c['id']}: {c['brand']} {c['model']}: {c['license_plate']}" for c in cars
    ]))

@router.message(SpotState.select_car)
async def select_car(message: Message, state: FSMContext):
    if message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]:
        return await handle_navigation_buttons(message, state)

    data = await state.get_data()
    car = next((c for c in data.get("cars", []) if f"{c['id']}: {c['brand']} {c['model']}: {c['license_plate']}" == message.text.strip()), None)
    if not car:
        return await message.answer("–ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    try:
        cards = await get_user_cards(data["phone_number"])
    except Exception:
        logger.exception("[BOT] get_user_cards failed")
        return await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç–∫–∏.")

    if not cards:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫.")

    await push_state(state, SpotState.select_card)
    await state.update_data(selected_car=car, cards=cards)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É:", reply_markup=build_keyboard_from_list([
        f"{c['id']}: {c['number']}" for c in cards
    ]))

@router.message(SpotState.select_card)
async def select_card(message: Message, state: FSMContext):
    if message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]:
        return await handle_navigation_buttons(message, state)

    data = await state.get_data()
    selected = next((c for c in data.get("cards", []) if f"{c['id']}: {c['number']}" == message.text.strip()), None)
    if not selected:
        return await message.answer("‚ùå –ö–∞—Ä—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    await push_state(state, SpotState.select_duration)
    await state.update_data(selected_card=selected)

    durations = [f"{i} –≥–æ–¥–∏–Ω" for i in range(1, 25)]
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=build_keyboard_from_list(durations))

@router.message(SpotState.select_duration)
async def select_duration(message: Message, state: FSMContext):
    if message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]:
        return await handle_navigation_buttons(message, state)

    try:
        duration_hours = int(message.text.split()[0])
    except Exception:
        return await message.answer("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. `2 –≥–æ–¥–∏–Ω–∏`")

    data = await state.get_data()
    spot = data.get("selected_spot")
    card = data.get("selected_card")
    car = data.get("selected_car")
    parking = data.get("selected_parking")

    if not spot or not card or not car or not parking:
        return await message.answer("‚ö†Ô∏è –î–∞–Ω—ñ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ–ø–æ–≤–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ –ø–æ—á–∞—Ç–∫—É.", reply_markup=main_menu())

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É –∑–∞ –≥–æ–¥–∏–Ω—É –∑ –º—ñ—Å—Ü—è
    hourly_rate = spot.get("hourly_rate")
    if hourly_rate is None:
        return await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑–∞ –≥–æ–¥–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—Ü—è.")

    total_price = duration_hours * hourly_rate
    kyiv_tz = pytz.timezone("Europe/Kyiv")
    occupied_from = datetime.now(kyiv_tz)

    await push_state(state, SpotState.confirm_booking)
    await state.update_data(
        duration_hours=duration_hours,
        total_price=total_price,
        occupied_from=occupied_from.isoformat()
    )

    card_masked = f"{card['number'][:4]} **** **** {card['number'][-4:]}"
    await message.answer(
        f"üìç –ü–∞—Ä–∫—ñ–Ω–≥: {parking['name']}\n"
        f"üÖøÔ∏è –ú—ñ—Å—Ü–µ ‚Ññ{spot['number']}\n"
        f"üöó –ê–≤—Ç–æ: {car['brand']} {car['model']} {car['license_plate']}\n"
        f"üí≥ –ö–∞—Ä—Ç–∫–∞: {card_masked}\n"
        f"‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration_hours} –≥–æ–¥\n"
        f"üí∞ –î–æ —Å–ø–ª–∞—Ç–∏: {total_price} –≥—Ä–Ω\n\n"
        f"‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –¢–∞–∫"), KeyboardButton(text="‚ùå –ù—ñ")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")],
            ],
            resize_keyboard=True,
        ),
    )


@router.message(SpotState.confirm_booking)
async def confirm_booking(message: Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚ùå –ù—ñ":
        await state.clear()
        return await message.answer("‚ùå –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
    if text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]:
        return await handle_navigation_buttons(message, state)
    if text != "‚úÖ –¢–∞–∫":
        return await message.answer("‚ùó –û–±–µ—Ä—ñ—Ç—å: ‚úÖ –¢–∞–∫ –∞–±–æ ‚ùå –ù—ñ")

    data = await state.get_data()
    try:
        occupied_from = datetime.fromisoformat(data["occupied_from"])
    except Exception:
        occupied_from = datetime.now(pytz.timezone("Europe/Kyiv"))

    result = await book_spot(
        spot_id=data["selected_spot"]["id"],
        car_id=data["selected_car"]["id"],
        phone_number=data["phone_number"],
        card_id=data["selected_card"]["id"],
        duration_hours=data["duration_hours"],
        occupied_from=occupied_from.isoformat(),
    )

    if not result:
        return await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")

    occupied_until = occupied_from + timedelta(hours=data["duration_hours"])
    await message.answer(
        f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n"
        f"üÖøÔ∏è –ú—ñ—Å—Ü–µ ‚Ññ{data['selected_spot']['number']}\n"
        f"üöó –ê–≤—Ç–æ: {data['selected_car']['brand']} {data['selected_car']['license_plate']}\n"
        f"üí∞ –°—É–º–∞: {result['total_price']} –≥—Ä–Ω\n"
        f"üïì –ó: {occupied_from.strftime('%d.%m.%Y %H:%M')}\n"
        f"üïì –ü–æ: {occupied_until.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìÑ ID: {result['id']}\n"
        f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {datetime.fromisoformat(result['created_at']).strftime('%d.%m.%Y %H:%M')}",
        reply_markup=main_menu()
    )
    await state.clear()
    await state.update_data(phone_number=data["phone_number"])

BOOKINGS_PER_PAGE = 5

async def format_booking(b, spot_cache: dict):
    try:
        spot_id = b.get("spot_id")
        if spot_id not in spot_cache:
            spot_cache[spot_id] = await get_spot_by_id(spot_id)
        spot = spot_cache[spot_id]
        if not spot:
            return f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ID {b.get('id')}"

        occupied_from = parsedate_to_datetime(spot['occupied_from']).astimezone(pytz.timezone("Europe/Kyiv"))
        occupied_until = parsedate_to_datetime(spot['occupied_until']).astimezone(pytz.timezone("Europe/Kyiv"))
        card = b.get("card", {})
        car = b.get("car", {})

        return (
            f"üìÑ ID: {b.get('id')}\n"
            f"üÖøÔ∏è –ú—ñ—Å—Ü–µ ‚Ññ{spot.get('number', '?')}\n"
            f"üöó –ê–≤—Ç–æ: {car.get('brand', '')} {car.get('license_plate', '')}\n"
            f"üí≥ –ö–∞—Ä—Ç–∫–∞: ****{card.get('number', '')[-4:]}\n"
            f"‚è≥ {b.get('duration_hours')} –≥–æ–¥\n"
            f"üïì –ó: {occupied_from.strftime('%d.%m.%Y %H:%M')}\n"
            f"üïì –ü–æ: {occupied_until.strftime('%d.%m.%Y %H:%M')}\n"
            f"üí∞ –°—É–º–∞: {b.get('total_price')} –≥—Ä–Ω\n"
            f"{STATUS_LABELS.get(b.get('status'), '‚ùî –°—Ç–∞—Ç—É—Å?')}"
        )
    except Exception as e:
        logger.exception("format_booking error")
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ID {b.get('id')}"

def build_bookings_keyboard(page: int, total_pages: int) -> ReplyKeyboardMarkup:
    buttons = []
    nav = []

    if page > 1:
        nav.append(KeyboardButton(text="‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è"))
    if page < total_pages:
        nav.append(KeyboardButton(text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞"))

    if nav:
        buttons.append(nav)

    buttons.append([KeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
@router.message(F.text == "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")
async def handle_booking_status(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get("phone_number")
    if not phone:
        return await message.answer("‚ö†Ô∏è –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /start")
    bookings = await get_user_bookings(phone)
    if not bookings:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å.", reply_markup=main_menu())
    bookings.sort(key=lambda b: b["created_at"], reverse=True)
    await state.update_data(bookings=bookings, booking_page=1)
    await show_booking_page(message, bookings, 1)

@router.message(F.text.in_(["‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", "‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞"]))
async def handle_booking_pagination(message: Message, state: FSMContext):
    data = await state.get_data()
    bookings = data.get("bookings", [])
    page = data.get("booking_page", 1)
    total_pages = (len(bookings) + BOOKINGS_PER_PAGE - 1) // BOOKINGS_PER_PAGE
    if message.text == "‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è" and page > 1:
        page -= 1
    elif message.text == "‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞" and page < total_pages:
        page += 1
    await state.update_data(booking_page=page)
    await show_booking_page(message, bookings, page)

async def show_booking_page(message: Message, bookings: list, page: int):
    start = (page - 1) * BOOKINGS_PER_PAGE
    end = start + BOOKINGS_PER_PAGE
    chunk = bookings[start:end]
    total_pages = (len(bookings) + BOOKINGS_PER_PAGE - 1) // BOOKINGS_PER_PAGE
    spot_cache = {}
    text = "\n\n".join([await format_booking(b, spot_cache) for b in chunk])
    await message.answer(
        f"üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{total_pages}\n\n{text}",
        reply_markup=build_bookings_keyboard(page, total_pages),
    )
