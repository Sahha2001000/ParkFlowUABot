from datetime import datetime
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from loguru import logger

from telegram_bot.keyboards.menu import main_menu
from telegram_bot.services.car_service import (
    add_car_phone,
    get_user_cars,
    update_car_by_id,
    delete_car_by_id
)

router = Router()


# –°—Ç–∞–Ω–∏ FSM
class AddCarState(StatesGroup):
    brand = State()
    model = State()
    year = State()
    license_plate = State()


class UpdateCarState(StatesGroup):
    brand = State()
    model = State()
    year = State()
    selected_plate = State()


# –ö–Ω–æ–ø–∫–∏
def back_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )


def cars_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ")],
            [KeyboardButton(text="üöò –î–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ")],
            [KeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∞–≤—Ç–æ")],
            [KeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∞–≤—Ç–æ")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


def validate_license_plate(plate: str) -> bool:
    return (
        len(plate) == 8 and
        plate[:2].isalpha() and
        plate[2:6].isdigit() and
        plate[6:].isalpha()
    )


# –ú–µ–Ω—é –∞–≤—Ç–æ
@router.message(F.text == "üöò –ú–æ—ó –∞–≤—Ç–æ")
async def open_cars_menu(message: Message, state: FSMContext):
    await state.update_data(last_menu="main")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è–º–∏:", reply_markup=cars_menu_keyboard())


# üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ
@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ")
async def list_user_cars(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get("phone_number")
    if not phone:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return
    try:
        cars = await get_user_cars(phone)
        if not cars:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–≤—Ç–æ.")
            return
        text = "üöò –í–∞—à—ñ –∞–≤—Ç–æ:\n\n"
        for i, car in enumerate(cars, 1):
            text += (
                f"{i}. {car['brand']} {car['model']} {car['year']}\n"
                f"   –ù–æ–º–µ—Ä: {car['license_plate']}\n\n"
            )
        await message.answer(text)
    except Exception as e:
        logger.error(f"[CAR] list_user_cars error: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–≤—Ç–æ.")


# üöò –î–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ
@router.message(F.text == "üöò –î–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ")
async def start_add_car(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ:", reply_markup=back_kb())
    await state.set_state(AddCarState.brand)


@router.message(AddCarState.brand)
async def get_brand(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        phone = data.get("phone_number")
        await state.clear()
        if phone:
            await state.update_data(phone_number=phone)
        await message.answer("‚Ü©Ô∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –∞–≤—Ç–æ:", reply_markup=cars_menu_keyboard())
        return
    brand = message.text.strip()
    if len(brand) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞.", reply_markup=back_kb())
        return
    await state.update_data(brand=brand)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:", reply_markup=back_kb())
    await state.set_state(AddCarState.model)


@router.message(AddCarState.model)
async def get_model(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        phone = data.get("phone_number")
        await state.clear()
        if phone:
            await state.update_data(phone_number=phone)
        await message.answer("‚Ü©Ô∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –∞–≤—Ç–æ:", reply_markup=cars_menu_keyboard())
        return
    model = message.text.strip()
    if len(model) < 1:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞.", reply_markup=back_kb())
        return
    await state.update_data(model=model)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É:", reply_markup=back_kb())
    await state.set_state(AddCarState.year)


@router.message(AddCarState.year)
async def get_year(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        phone = data.get("phone_number")
        await state.clear()
        if phone:
            await state.update_data(phone_number=phone)
        await message.answer("‚Ü©Ô∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –∞–≤—Ç–æ:", reply_markup=cars_menu_keyboard())
        return
    year = message.text.strip()
    if not year.isdigit() or not (1900 <= int(year) <= datetime.now().year + 1):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä—ñ–∫.", reply_markup=back_kb())
        return
    await state.update_data(year=int(year))
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–ê–ê1234–í–ö):", reply_markup=back_kb())
    await state.set_state(AddCarState.license_plate)


@router.message(AddCarState.license_plate)
async def get_plate(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        phone = data.get("phone_number")
        await state.clear()
        if phone:
            await state.update_data(phone_number=phone)
        await message.answer("‚Ü©Ô∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –∞–≤—Ç–æ:", reply_markup=cars_menu_keyboard())
        return
    plate = message.text.strip().upper().replace("—ñ", "–Ü")
    if not validate_license_plate(plate):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.", reply_markup=back_kb())
        return
    data = await state.get_data()
    phone = data.get("phone_number")
    if not phone:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return
    try:
        result = await add_car_phone(phone, {
            "brand": data["brand"],
            "model": data["model"],
            "year": data["year"],
            "license_plate": plate
        })
        if result == "duplicate":
            await message.answer("‚ö†Ô∏è –ê–≤—Ç–æ –≤–∂–µ —ñ—Å–Ω—É—î.")
        elif result:
            await message.answer(f"‚úÖ –ê–≤—Ç–æ –¥–æ–¥–∞–Ω–æ: {plate}")
        else:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ.")
    except Exception as e:
        logger.error(f"[CAR] Add error: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ.")
    await state.clear()
    await state.update_data(phone_number=phone)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥–∞–ª—å—à—É –¥—ñ—é:", reply_markup=cars_menu_keyboard())


# ‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∞–≤—Ç–æ
@router.message(F.text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∞–≤—Ç–æ")
async def start_update_car(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get("phone_number")
    if not phone:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return
    try:
        cars = await get_user_cars(phone)
        if not cars:
            await message.answer("üì≠ –ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        for car in cars:
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏", callback_data=f"edit:{car['license_plate']}")
            ]])
            await message.answer(
                f"{car['brand']} {car['model']} {car['year']}\n–ù–æ–º–µ—Ä: {car['license_plate']}",
                reply_markup=kb
            )
    except Exception as e:
        logger.error(f"[CAR] update list error: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ.")


@router.callback_query(F.data.startswith("edit:"))
async def select_car_for_update(callback: CallbackQuery, state: FSMContext):
    plate = callback.data.split(":")[1]
    await state.update_data(selected_plate=plate)
    await state.set_state(UpdateCarState.brand)
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–∞—Ä–∫—É –∞–≤—Ç–æ:", reply_markup=back_kb())
    await callback.answer()


@router.message(UpdateCarState.brand)
async def update_brand(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        phone = data.get("phone_number")
        await state.clear()
        if phone:
            await state.update_data(phone_number=phone)
        await message.answer("‚Ü©Ô∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –∞–≤—Ç–æ:", reply_markup=cars_menu_keyboard())
        return
    brand = message.text.strip()
    if len(brand) < 2:
        await message.answer("‚ùå –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ –º–∞—Ä–∫–∞.", reply_markup=back_kb())
        return
    await state.update_data(brand=brand)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:", reply_markup=back_kb())
    await state.set_state(UpdateCarState.model)


@router.message(UpdateCarState.model)
async def update_model(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        phone = data.get("phone_number")
        await state.clear()
        if phone:
            await state.update_data(phone_number=phone)
        await message.answer("‚Ü©Ô∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –∞–≤—Ç–æ:", reply_markup=cars_menu_keyboard())
        return
    model = message.text.strip()
    if len(model) < 1:
        await message.answer("‚ùå –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ –º–æ–¥–µ–ª—å.", reply_markup=back_kb())
        return
    await state.update_data(model=model)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–∫:", reply_markup=back_kb())
    await state.set_state(UpdateCarState.year)


@router.message(UpdateCarState.year)
async def update_year(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        phone = data.get("phone_number")
        await state.clear()
        if phone:
            await state.update_data(phone_number=phone)
        await message.answer("‚Ü©Ô∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –∞–≤—Ç–æ:", reply_markup=cars_menu_keyboard())
        return
    year = message.text.strip()
    if not year.isdigit() or not (1900 <= int(year) <= datetime.now().year + 1):
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä—ñ–∫.", reply_markup=back_kb())
        return

    data = await state.get_data()
    phone = data.get("phone_number")
    plate = data.get("selected_plate")

    if not phone or not plate:
        await message.answer("‚ö†Ô∏è –î–∞–Ω—ñ –≤—Ç—Ä–∞—á–µ–Ω—ñ.")
        await state.clear()
        return

    try:
        result = await update_car_by_id(phone, plate, {
            "brand": data["brand"],
            "model": data["model"],
            "year": int(year)
        })
        if result:
            await message.answer("‚úÖ –ê–≤—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∞–≤—Ç–æ.")
    except Exception as e:
        logger.error(f"[CAR] update error: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.")
    await state.clear()
    await state.update_data(phone_number=phone)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥–∞–ª—å—à—É –¥—ñ—é:", reply_markup=cars_menu_keyboard())


# üóë –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ
@router.message(F.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∞–≤—Ç–æ")
async def start_delete_car(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get("phone_number")
    if not phone:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return
    try:
        cars = await get_user_cars(phone)
        if not cars:
            await message.answer("üì≠ –ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        for car in cars:
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{car['license_plate']}")
            ]])
            await message.answer(
                f"{car['brand']} {car['model']} {car['year']}\n–ù–æ–º–µ—Ä: {car['license_plate']}",
                reply_markup=kb
            )
    except Exception as e:
        logger.error(f"[CAR] delete error: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ.")


@router.callback_query(F.data.startswith("delete:"))
async def delete_car(callback: CallbackQuery, state: FSMContext):
    plate = callback.data.split(":")[1]
    data = await state.get_data()
    phone = data.get("phone_number")
    if not phone:
        await callback.answer("‚ö†Ô∏è –ù–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return
    try:
        result = await delete_car_by_id(phone, plate)
        if result:
            await callback.message.edit_text("‚úÖ –ê–≤—Ç–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await callback.message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–≤—Ç–æ.")
    except Exception as e:
        logger.error(f"[CAR] delete_car error: {e}")
        await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ.")
    await callback.answer()


# –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await message.answer("‚¨ÖÔ∏è –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())
