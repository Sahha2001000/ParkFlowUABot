from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from loguru import logger
from aiohttp import ClientConnectorError

from telegram_bot.services.api_service import is_api_available
from telegram_bot.services.user_service import get_user_by_phone, create_user
from telegram_bot.keyboards.menu import main_menu

router = Router()

class Registration(StatesGroup):
    first_name = State()
    last_name = State()
    email = State()

# --- –ö–æ–Ω—Ç–∞–∫—Ç ---
@router.message(F.contact)
async def handle_contact(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    telegram_id = message.from_user.id

    logger.info(f"[REGISTRATION] –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç –≤—ñ–¥ telegram_id={telegram_id}, phone={phone}")

    await state.update_data(phone_number=phone)

    if not await is_api_available():
        logger.warning("API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É")
        await message.answer(
            "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîÅ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    try:
        user = await get_user_by_phone(phone)
    except Exception as e:
        logger.error(f"[REGISTRATION] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É get_user_by_phone: {e}")
        user = None

    if user:
        logger.info(f"[REGISTRATION] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π: {user}")
        await message.answer(
            f"–í–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —è–∫ {user.get('first_name')}!",
            reply_markup=main_menu()
        )
        return

    logger.info("[REGISTRATION] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ—á–∏–Ω–∞—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Registration.first_name)

# --- First name ---
@router.message(Registration.first_name)
async def get_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ:")
    await state.set_state(Registration.last_name)

# --- Last name ---
@router.message(Registration.last_name)
async def get_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())

    email_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –≤–≤–µ–¥—ñ—Ç—å email –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':", reply_markup=email_keyboard)
    await state.set_state(Registration.email)

# --- Email or skip ---
@router.message(Registration.email, F.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
async def skip_email(message: Message, state: FSMContext):
    await state.update_data(email=None)
    await finish_registration(message, state)

@router.message(Registration.email)
async def get_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text.strip())
    await finish_registration(message, state)

# --- Final step ---
async def finish_registration(message: Message, state: FSMContext):
    data = await state.get_data()

    if not await is_api_available():
        logger.warning("[REGISTRATION] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó")
        await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    phone_number = data.get("phone_number")  # üîπ –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –ù–û–ú–ï–†

    try:
        await create_user(
            telegram_id=message.from_user.id,
            phone_number=phone_number,
            first_name=data["first_name"],
            last_name=data["last_name"],
            email=data.get("email")
        )
        logger.info(f"[REGISTRATION] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ: telegram_id={message.from_user.id}")
    except ClientConnectorError:
        logger.exception("[REGISTRATION] API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await message.answer("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    except Exception as e:
        logger.exception(f"[REGISTRATION] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    await message.answer(
        f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üë§ {data['first_name']} {data['last_name']}\n"
        f"üìû {phone_number}\n"
        f"‚úâÔ∏è {data.get('email') or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}",
        parse_mode="Markdown"
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:", reply_markup=main_menu())

    await state.clear()
    await state.update_data(phone_number=phone_number)  # üîπ –ü–û–í–ï–†–¢–ê–Ñ–ú–û –ù–û–ú–ï–† –£ FSM
