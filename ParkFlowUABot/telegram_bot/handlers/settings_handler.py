from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from telegram_bot.services.user_service import get_user_by_phone, delete_user_by_phone, update_user_by_phone
from telegram_bot.services.api_service import is_api_available
from telegram_bot.keyboards.menu import main_menu, settings_menu

router = Router()


class EditState(StatesGroup):
    new_full_name = State()
    new_email = State()


async def get_last_menu_markup(state: FSMContext):
    data = await state.get_data()
    menu = data.get("last_menu")
    if menu == "settings":
        return settings_menu()
    elif menu == "main":
        return main_menu()
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîÅ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )


async def get_valid_phone_or_notify(message: Message, state: FSMContext) -> str | None:
    data = await state.get_data()
    phone = data.get("phone_number")

    if not phone:
        await message.answer("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return None

    if not await is_api_available():
        markup = await get_last_menu_markup(state)
        await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=markup)
        return None

    return phone


@router.message(F.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
async def open_settings(message: Message, state: FSMContext):
    logger.info(f"[SETTINGS] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤—ñ–¥–∫—Ä–∏–≤ –º–µ–Ω—é –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    await state.update_data(last_menu="settings")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", reply_markup=settings_menu())


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    logger.info(f"[SETTINGS] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    await state.update_data(last_menu="main")
    await message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())


@router.message(F.text == "üë§ –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ–±–µ")
async def get_user_info(message: Message, state: FSMContext):
    logger.info(f"[SETTINGS] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–ø–∏—Ç–∞–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ–±–µ")
    phone = await get_valid_phone_or_notify(message, state)
    if not phone:
        return

    user = await get_user_by_phone(phone)
    markup = await get_last_menu_markup(state)
    if user:
        await message.answer(
            f"üë§ *–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:*\n"
            f"–Ü–º'—è: {user.get('first_name', '')} {user.get('last_name', '')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone_number', '')}\n"
            f"Email: {user.get('email') or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}",
            parse_mode="Markdown",
            reply_markup=markup
        )
    else:
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=markup)


@router.message(F.text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è")
async def change_name_prompt(message: Message, state: FSMContext):
    logger.info(f"[SETTINGS] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–º—ñ–Ω—é—î —ñ–º‚Äô—è")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EditState.new_full_name)


@router.message(EditState.new_full_name)
async def update_full_name(message: Message, state: FSMContext):
    input_text = message.text.strip()
    parts = input_text.split(maxsplit=1)
    phone = await get_valid_phone_or_notify(message, state)
    markup = await get_last_menu_markup(state)

    if not phone:
        await state.clear()
        return

    if len(parts) != 2:
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å —ñ —ñ–º‚Äô—è, —ñ –ø—Ä—ñ–∑–≤–∏—â–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ).")
        return

    first_name, last_name = parts
    success = await update_user_by_phone(phone, {"first_name": first_name, "last_name": last_name})
    if success:
        await message.answer("‚úÖ –Ü–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=markup)
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=markup)

    await state.clear()
    await state.update_data(phone_number=phone, last_menu="settings")


@router.message(F.text == "üìß –ó–º—ñ–Ω–∏—Ç–∏ email")
async def change_email_prompt(message: Message, state: FSMContext):
    logger.info(f"[SETTINGS] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–º—ñ–Ω—é—î email")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π email:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EditState.new_email)


@router.message(EditState.new_email)
async def update_email(message: Message, state: FSMContext):
    email = message.text.strip()
    data = await state.get_data()
    phone = await get_valid_phone_or_notify(message, state)
    markup = await get_last_menu_markup(state)

    if not phone:
        await state.clear()
        return

    if "@" not in email or "." not in email:
        await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    success = await update_user_by_phone(phone, {"email": email})
    if success:
        await message.answer("‚úÖ Email –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=markup)
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ email. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=markup)

    await state.clear()
    await state.update_data(phone_number=phone, last_menu="settings")


@router.message(F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –º—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
async def delete_profile(message: Message, state: FSMContext):
    logger.info(f"[SETTINGS] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
    await state.update_data(last_menu="settings")
    confirm_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏")],
            [KeyboardButton(text="‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("‚ùó –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å?", reply_markup=confirm_keyboard)


@router.message(F.text == "‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏")
async def confirm_delete(message: Message, state: FSMContext):
    logger.info(f"[SETTINGS] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
    phone = await get_valid_phone_or_notify(message, state)
    markup = await get_last_menu_markup(state)

    if not phone:
        return

    success = await delete_user_by_phone(phone)
    if success:
        await message.answer("‚úÖ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–≤–µ–¥—ñ—Ç—å /start.", reply_markup=main_menu())
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=markup)


@router.message(F.text == "‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_delete(message: Message, state: FSMContext):
    logger.info(f"[SETTINGS] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —Å–∫–∞—Å—É–≤–∞–≤ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
    await message.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=settings_menu())


@router.message(F.text == "üîÅ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑")
async def retry_action(message: Message, state: FSMContext):
    logger.info(f"[ERROR_HANDLER] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'üîÅ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑'")
    markup = await get_last_menu_markup(state)
    await message.answer("üîÅ –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –¥—ñ—é –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–µ –º–µ–Ω—é.", reply_markup=markup)


@router.message()
async def fallback_handler(message: Message, state: FSMContext):
    logger.warning(f"[ERROR_HANDLER] –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.id}: '{message.text}'")
    markup = await get_last_menu_markup(state)
    await message.answer("‚õî –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç —ñ–∑ –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /start.", reply_markup=markup)
