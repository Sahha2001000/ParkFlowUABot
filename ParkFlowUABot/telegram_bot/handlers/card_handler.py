from aiogram import Router, F, types
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from loguru import logger

from telegram_bot.keyboards.menu import main_menu, card_menu
from telegram_bot.services.card_service import (
    add_card,
    get_user_cards,
    delete_card_by_id,
    update_card_by_id
)

router = Router()


class AddCardState(StatesGroup):
    number = State()
    exp_date = State()
    cvv = State()


class UpdateCardState(StatesGroup):
    number = State()
    exp_date = State()
    cvv = State()


def back_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )


@router.message(F.text == "üí≥ –ö–∞—Ä—Ç–∫–∏")
async def open_card_menu(message: Message, state: FSMContext):
    logger.info(f"[CARD] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤—ñ–¥–∫—Ä–∏–≤ –º–µ–Ω—é –∫–∞—Ä—Ç–æ–∫")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–∞—Ä—Ç–∫–∞–º–∏:", reply_markup=card_menu())


@router.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É")
async def start_add_card(message: Message, state: FSMContext):
    logger.info(f"[CARD] –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ ‚Äî —Å—Ç–∞—Ä—Ç –≤—ñ–¥ {message.from_user.id}")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (16 —Ü–∏—Ñ—Ä):", reply_markup=back_kb())
    await state.set_state(AddCardState.number)


@router.message(AddCardState.number)
async def get_card_number(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logger.info(f"[CARD] {message.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –Ω–∞–∑–∞–¥ –∑ –Ω–æ–º–µ—Ä–∞")
        await return_to_menu(state, message)
        return

    number = message.text.strip().replace(" ", "")
    if not (number.isdigit() and len(number) == 16):
        await message.answer("‚ùå –ù–æ–º–µ—Ä –º–∞—î –±—É—Ç–∏ –∑ 16 —Ü–∏—Ñ—Ä:", reply_markup=back_kb())
        return

    logger.debug(f"[CARD] –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä –≤—ñ–¥ {message.from_user.id}: {number}")
    await state.update_data(number=number)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó (MM/YY):", reply_markup=back_kb())
    await state.set_state(AddCardState.exp_date)


@router.message(AddCardState.exp_date)
async def get_exp_date(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logger.info(f"[CARD] {message.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –Ω–∞–∑–∞–¥ –∑ –¥–∞—Ç–∏")
        await return_to_menu(state, message)
        return

    exp = message.text.strip()
    if len(exp) != 5 or exp[2] != "/" or not (exp[:2].isdigit() and exp[3:].isdigit()):
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏ MM/YY:", reply_markup=back_kb())
        return

    logger.debug(f"[CARD] –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤—ñ–¥ {message.from_user.id}: {exp}")
    await state.update_data(exp_date=exp)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å CVV (3 —Ü–∏—Ñ—Ä–∏):", reply_markup=back_kb())
    await state.set_state(AddCardState.cvv)


@router.message(AddCardState.cvv)
async def get_cvv(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logger.info(f"[CARD] {message.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –Ω–∞–∑–∞–¥ –∑ CVV")
        await return_to_menu(state, message)
        return

    cvv = message.text.strip()
    if not (cvv.isdigit() and len(cvv) == 3):
        await message.answer("‚ùå CVV –º–∞—î –±—É—Ç–∏ –∑ 3 —Ü–∏—Ñ—Ä:", reply_markup=back_kb())
        return

    await state.update_data(cvv=cvv)
    data = await state.get_data()
    phone = data.get("phone_number")

    if not phone:
        logger.error(f"[CARD] –ù–µ–º–∞—î –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ state —É {message.from_user.id}")
        await message.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    logger.info(f"[CARD] –°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É –¥–ª—è {phone}")
    try:
        result = await add_card(phone, {
            "number": data["number"],
            "exp_date": data["exp_date"],
            "cvv": data["cvv"]
        })
        if result == "duplicate":
            await message.answer("‚ö†Ô∏è –¢–∞–∫–∞ –∫–∞—Ä—Ç–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î.")
        elif result:
            await message.answer("‚úÖ –ö–∞—Ä—Ç–∫—É –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        else:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É.")
    except Exception as e:
        logger.exception(f"[CARD] –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")

    await state.clear()
    await state.update_data(phone_number=phone)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥–∞–ª—å—à—ñ –¥—ñ—ó:", reply_markup=card_menu())


@router.message(F.text == "üìã –ú–æ—ó –∫–∞—Ä—Ç–∫–∏")
async def list_cards(message: Message, state: FSMContext):
    phone = (await state.get_data()).get("phone_number")
    logger.info(f"[CARD] {message.from_user.id} –∑–∞–ø–∏—Ç–∞–≤ —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ–∫")

    if not phone:
        await message.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    cards = await get_user_cards(phone)
    if not cards:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫.")
        return

    response = "üí≥ –í–∞—à—ñ –∫–∞—Ä—Ç–∫–∏:\n\n"
    for i, card in enumerate(cards, 1):
        masked = f"{card['number'][:4]} **** **** {card['number'][-4:]}"
        response += f"{i}. {masked} ‚Äî {card['exp_date']}\n"

    await message.answer(response)


@router.message(F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É")
async def show_cards_for_deletion(message: Message, state: FSMContext):
    phone = (await state.get_data()).get("phone_number")
    logger.info(f"[CARD] {message.from_user.id} —Ö–æ—á–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É")

    if not phone:
        await message.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    cards = await get_user_cards(phone)
    if not cards:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∫–∞—Ä—Ç–æ–∫.")
        return

    for card in cards:
        card_id = card["id"]
        masked = f"{card['number'][:4]} **** **** {card['number'][-4:]}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_card:{card_id}")]
        ])
        await message.answer(f"üí≥ {masked} ‚Äî {card['exp_date']}", reply_markup=kb)


@router.callback_query(F.data.startswith("delete_card:"))
async def handle_card_deletion(callback: CallbackQuery, state: FSMContext):
    card_id = int(callback.data.split(":")[1])
    logger.info(f"[CARD] –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ ID {card_id}")
    success = await delete_card_by_id(card_id)
    if success:
        await callback.message.edit_text("‚úÖ –ö–∞—Ä—Ç–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await callback.message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É.")
    await callback.answer()


@router.message(F.text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É")
async def show_cards_for_update(message: Message, state: FSMContext):
    phone = (await state.get_data()).get("phone_number")
    logger.info(f"[CARD] {message.from_user.id} —Ö–æ—á–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É")

    if not phone:
        await message.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    cards = await get_user_cards(phone)
    if not cards:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∫–∞—Ä—Ç–æ–∫.")
        return

    for card in cards:
        card_id = card["id"]
        masked = f"{card['number'][:4]} **** **** {card['number'][-4:]}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏", callback_data=f"edit_card:{card_id}")]
        ])
        await message.answer(f"üí≥ {masked} ‚Äî {card['exp_date']}", reply_markup=kb)


@router.callback_query(F.data.startswith("edit_card:"))
async def start_update_card(callback: CallbackQuery, state: FSMContext):
    card_id = int(callback.data.split(":")[1])
    logger.info(f"[CARD] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –≤–∏–±—Ä–∞–≤ –∫–∞—Ä—Ç–∫—É ID {card_id} –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
    await state.update_data(card_id=card_id)
    await state.set_state(UpdateCardState.number)
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:", reply_markup=back_kb())
    await callback.answer()


@router.message(UpdateCardState.number)
async def update_number(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await return_to_menu(state, message)
        return

    number = message.text.strip().replace(" ", "")
    if not (number.isdigit() and len(number) == 16):
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å 16 —Ü–∏—Ñ—Ä:", reply_markup=back_kb())
        return

    logger.debug(f"[CARD] –ù–æ–≤–∏–π –Ω–æ–º–µ—Ä: {number}")
    await state.update_data(number=number)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó (MM/YY):", reply_markup=back_kb())
    await state.set_state(UpdateCardState.exp_date)


@router.message(UpdateCardState.exp_date)
async def update_exp_date(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await return_to_menu(state, message)
        return

    exp = message.text.strip()
    if len(exp) != 5 or exp[2] != "/" or not (exp[:2].isdigit() and exp[3:].isdigit()):
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏ MM/YY:", reply_markup=back_kb())
        return

    logger.debug(f"[CARD] –ù–æ–≤–∞ –¥–∞—Ç–∞: {exp}")
    await state.update_data(exp_date=exp)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π CVV:", reply_markup=back_kb())
    await state.set_state(UpdateCardState.cvv)


@router.message(UpdateCardState.cvv)
async def update_cvv(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await return_to_menu(state, message)
        return

    cvv = message.text.strip()
    if not (cvv.isdigit() and len(cvv) == 3):
        await message.answer("‚ùå CVV –º–∞—î –±—É—Ç–∏ –∑ 3 —Ü–∏—Ñ—Ä:", reply_markup=back_kb())
        return

    await state.update_data(cvv=cvv)
    data = await state.get_data()
    phone = data.get("phone_number")
    card_id = data.get("card_id")

    logger.info(f"[CARD] –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ {card_id} –¥–ª—è {phone}")
    try:
        result = await update_card_by_id(card_id, {
            "number": data["number"],
            "exp_date": data["exp_date"],
            "cvv": data["cvv"]
        })
        if result:
            await message.answer("‚úÖ –ö–∞—Ä—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        else:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É.")
    except Exception as e:
        logger.error(f"[CARD] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–∞—Ä—Ç–∫–∏: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.")

    await state.clear()
    await state.update_data(phone_number=phone)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥–∞–ª—å—à—ñ –¥—ñ—ó:", reply_markup=card_menu())


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")
async def return_main(message: Message, state: FSMContext):
    logger.info(f"[CARD] {message.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    await message.answer("‚¨ÖÔ∏è –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())


async def return_to_menu(state: FSMContext, message: Message):
    phone = (await state.get_data()).get("phone_number")
    await state.clear()
    if phone:
        await state.update_data(phone_number=phone)
    logger.debug(f"[CARD] –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –∫–∞—Ä—Ç–æ–∫ –¥–ª—è {message.from_user.id}")
    await message.answer("‚Ü©Ô∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –∫–∞—Ä—Ç–æ–∫:", reply_markup=card_menu())
