from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime

from loguru import logger

from telegram_bot.services.feedback_service import send_feedback, get_all_feedbacks
from telegram_bot.services.user_service import get_user_by_phone, get_user_by_id
from telegram_bot.keyboards.menu import main_menu

router = Router()

class FeedbackStates(StatesGroup):
    typing_feedback = State()
    confirming = State()
    viewing_feedbacks = State()

FEEDBACKS_PER_PAGE = 5

# üìã –ú–µ–Ω—é
def feedback_menu_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫")],
            [KeyboardButton(text="üìñ –í—Å—ñ –≤—ñ–¥–≥—É–∫–∏")],
            [KeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def feedback_pagination_keyboard(page: int, total_pages: int) -> ReplyKeyboardMarkup:
    buttons = []

    nav = []
    if page > 1:
        nav.append(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    if page < total_pages:
        nav.append(KeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥"))
    if nav:
        buttons.append(nav)

    buttons.append([KeyboardButton(text="üìã –ú–µ–Ω—é –≤—ñ–¥–≥—É–∫—ñ–≤")])
    buttons.append([KeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@router.message(F.text == "üì£ –í—ñ–¥–≥—É–∫–∏")
async def feedback_menu(message: Message, state: FSMContext):
    await state.set_state(None)
    await message.answer("–ú–µ–Ω—é –≤—ñ–¥–≥—É–∫—ñ–≤:", reply_markup=feedback_menu_keyboard())

@router.message(F.text == "‚úçÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫")
async def prompt_feedback(message: Message, state: FSMContext):
    await state.set_state(FeedbackStates.typing_feedback)
    await message.answer("üìù –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    ))

@router.message(FeedbackStates.typing_feedback)
async def save_draft(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        return await feedback_menu(message, state)

    await state.update_data(draft=message.text.strip())
    await state.set_state(FeedbackStates.confirming)
    await message.answer(
        f"üìÑ –í–∞—à –≤—ñ–¥–≥—É–∫:\n\n{message.text.strip()}\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∞–±–æ ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )

@router.message(FeedbackStates.confirming)
async def send_final_feedback(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(FeedbackStates.typing_feedback)
        return await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É:")

    if message.text != "üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏":
        return await message.answer("‚ùó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∞–±–æ ‚¨ÖÔ∏è –ù–∞–∑–∞–¥.")

    data = await state.get_data()
    phone = data.get("phone_number")
    feedback_text = data.get("draft", "").strip()

    if not phone:
        await state.clear()
        return await message.answer("‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /start.", reply_markup=main_menu())

    user = await get_user_by_phone(phone)
    if not user:
        await state.clear()
        return await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())

    user_id = user["id"]
    await send_feedback(user_id=user_id, text=feedback_text)

    await message.answer("‚úÖ –í–∞—à –≤—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –î—è–∫—É—î–º–æ!", reply_markup=feedback_menu_keyboard())
    await state.clear()
    await state.update_data(phone_number=phone)  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω —É –∫–æ–Ω—Ç–µ–∫—Å—Ç

@router.message(F.text == "üìñ –í—Å—ñ –≤—ñ–¥–≥—É–∫–∏")
async def view_all_feedbacks(message: Message, state: FSMContext):
    feedbacks = await get_all_feedbacks()
    if not feedbacks:
        return await message.answer("üòî –©–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –≤—ñ–¥–≥—É–∫—É.")

    await state.set_state(FeedbackStates.viewing_feedbacks)
    await state.update_data(feedback_page=1)
    await send_feedback_page(message, feedbacks, page=1)

@router.message(F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚û°Ô∏è –í–ø–µ—Ä–µ–¥"]))
async def paginate_feedbacks(message: Message, state: FSMContext):
    feedbacks = await get_all_feedbacks()
    if not feedbacks:
        return await message.answer("üòî –í—ñ–¥–≥—É–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")

    data = await state.get_data()
    page = data.get("feedback_page", 1)
    total_pages = (len(feedbacks) + FEEDBACKS_PER_PAGE - 1) // FEEDBACKS_PER_PAGE

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and page > 1:
        page -= 1
    elif message.text == "‚û°Ô∏è –í–ø–µ—Ä–µ–¥" and page < total_pages:
        page += 1

    await state.update_data(feedback_page=page)
    await send_feedback_page(message, feedbacks, page)

async def send_feedback_page(message: Message, feedbacks: list, page: int):
    total_pages = (len(feedbacks) + FEEDBACKS_PER_PAGE - 1) // FEEDBACKS_PER_PAGE
    start = (page - 1) * FEEDBACKS_PER_PAGE
    end = start + FEEDBACKS_PER_PAGE
    chunk = feedbacks[::-1][start:end]

    lines = []

    for fb in chunk:
        user = await get_user_by_id(fb["user_id"])
        if user:
            full_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
        else:
            full_name = "–í–∏–¥–∞–ª–µ–Ω–∏–π –∞–∫–∞—É–Ω—Ç"

        created_at = fb.get("timestamp") or fb.get("created_at") or "‚Äî"
        try:
            created_at = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
        except Exception:
            pass

        lines.append(
            f"üë§ {full_name} (ID: {fb['user_id']})\n"
            f"üïì {created_at}\n"
            f"üí¨ {fb['text']}"
        )

    await message.answer(
        f"üìù –í—ñ–¥–≥—É–∫–∏ (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{total_pages}):\n\n" + "\n\n".join(lines),
        reply_markup=feedback_pagination_keyboard(page, total_pages)
    )

@router.message(F.text == "üìã –ú–µ–Ω—é –≤—ñ–¥–≥—É–∫—ñ–≤")
async def back_to_feedback_menu(message: Message, state: FSMContext):
    await state.set_state(None)
    await message.answer("–ú–µ–Ω—é –≤—ñ–¥–≥—É–∫—ñ–≤:", reply_markup=feedback_menu_keyboard())

@router.message(F.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def to_main(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data.get("phone_number")
    await state.clear()
    if phone:
        await state.update_data(phone_number=phone)
    await message.answer("‚¨ÖÔ∏è –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=main_menu())
