import aiohttp
import logging
from telegram_bot.config import API_BASE_URL

logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def create_user(telegram_id: int, first_name: str, last_name: str, phone_number: str, email: str = None):
    url = f"{API_BASE_URL}/users/register"
    payload = {
        "telegram_id": telegram_id,
        "first_name": first_name,
        "last_name": last_name,
        "phone_number": phone_number,
        "email": email
    }

    logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {payload}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å API: {response.status}")

                if response.status in [200, 201]:
                    try:
                        data = await response.json()
                        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: {data}")
                        return data
                    except Exception as json_err:
                        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON: {json_err}")
                        return None
                else:
                    error_text = await response.text()
                    logger.warning(f"API –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {response.status}, —Ç–µ–∫—Å—Ç: {error_text}")
                    return None

    except aiohttp.ClientError as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ HTTP-–∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
        return None
    except Exception as e:
        logger.exception(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —É create_user: {e}")
        return None

async def get_user_by_phone(phone_number: str):
    url = f"{API_BASE_URL}/users/by-phone"
    params = {"phone_number": phone_number}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as resp:
                logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–æ GET {url} –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}, —Å—Ç–∞—Ç—É—Å: {resp.status}")

                if resp.status == 200:
                    try:
                        data = await resp.json()
                        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π: {data}")
                        return data
                    except Exception as json_err:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {json_err}")
                        return None

                # –¢–µ–ø–µ—Ä 404 —Ç–∞–∫–æ–∂ —Å–ø—Ä–∏–π–º–∞—î—Ç—å—Å—è —è–∫ –ø–æ–º–∏–ª–∫–∞ API (–Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏)
                error_text = await resp.text()
                logger.error(f"‚ùå API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É: —Å—Ç–∞—Ç—É—Å {resp.status}, –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {error_text}")
                raise Exception("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API")

    except aiohttp.ClientError as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API —É get_user_by_phone: {e}")
        raise Exception("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API")
    except Exception as e:
        logger.exception(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —É get_user_by_phone: {e}")
        raise Exception("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —É get_user_by_phone")


# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def update_user_by_phone(phone_number: str, update_data: dict):
    url = f"{API_BASE_URL}/users/update"
    params = {"phone_number": phone_number}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.put(url, params=params, json=update_data) as resp:
                if resp.status in [200, 204]:
                    logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
                    return True
                else:
                    logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {resp.status}")
                    return False
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return False

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def delete_user_by_phone(phone_number: str):
    url = f"{API_BASE_URL}/users/delete"
    params = {"phone_number": phone_number}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.delete(url, params=params) as resp:
                if resp.status in [200, 204]:
                    logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                    return True
                else:
                    logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {resp.status}")
                    return False
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return False

# üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ ID
async def get_user_by_id(user_id: int):
    url = f"{API_BASE_URL}/users/{user_id}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                logger.info(f"[GET_USER_BY_ID] GET {url} -> {resp.status}")

                if resp.status == 200:
                    try:
                        data = await resp.json()
                        logger.info(f"[GET_USER_BY_ID] –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {data}")
                        return data
                    except Exception as json_err:
                        logger.error(f"[GET_USER_BY_ID] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {json_err}")
                        return None

                elif resp.status == 404:
                    logger.warning(f"[GET_USER_BY_ID] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                    return None

                else:
                    error_text = await resp.text()
                    logger.error(f"[GET_USER_BY_ID] {resp.status}: {error_text}")
                    return None

    except aiohttp.ClientError as e:
        logger.exception(f"[GET_USER_BY_ID] HTTP –ø–æ–º–∏–ª–∫–∞: {e}")
        return None
    except Exception as e:
        logger.exception(f"[GET_USER_BY_ID] –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return None